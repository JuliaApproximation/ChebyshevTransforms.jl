var documenterSearchIndex = {"docs":
[{"location":"padua_transforms/#Padua-Transforms","page":"Padua Transforms","title":"Padua Transforms","text":"","category":"section"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"CurrentModule = ChebyshevTransforms\nDocTestSetup = quote\n    using ChebyshevTransforms\nend","category":"page"},{"location":"padua_transforms/#Introduction","page":"Padua Transforms","title":"Introduction","text":"","category":"section"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"The Padua transform yields coefficients a_ij used to approximate a bivariate function f(x y) with","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"f(x y)  sum_i j a_ij  T_i(y)  T_j(x)","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"where T_n(x) = cos(n arccos(x)) is the nth Chebyshev polynomial. For reference, the first few Chebyshev polynomials are","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"beginaligned\nT_0(x) = 1 \nT_1(x) = x \nT_2(x) = 2x^2 - 1 \nT_3(x) = 4x^3 - 3x \nT_4(x) = 8x^4 - 8x^2 + 1\nendaligned","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"The inverse transform takes the coefficients a_ij and returns the function f(x y) evaluated at the so called Padua points.","category":"page"},{"location":"padua_transforms/#Basic-Usage","page":"Padua Transforms","title":"Basic Usage","text":"","category":"section"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"Start by evaluating a function on the Padua points. Here we approximate the function with a polynomial of total degree 3. The total degree is the degree of the largest polynomial in x plus the degree of the largest polynomial in y.","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"julia> vals = getpaduapoints(3) do x, y\n           y * (2x^2 - 1) + 5 * x * y + 2.5\n       end\n10-element Vector{Float64}:\n  8.5\n  2.5\n -3.5\n  3.914213562373095\n  1.0857864376269049\n -0.5\n  2.5\n  5.5\n -0.3284271247461903\n  5.32842712474619","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"Then create a PaduaTransformPlan and apply the paduatransform! to get the Chebyshev coefficeints a_ij.","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"julia> plan = PaduaTransformPlan{Float64}(3);\n\njulia> coeffs = paduatransform!(zeros(4, 4), plan, vals)\n4×4 Matrix{Float64}:\n 2.5  0.0  0.0  0.0\n 0.0  5.0  1.0  0.0\n 0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"We can go back to values using an InvPaduaTransformPlan and applying invpaduatransform!","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"julia> invplan = InvPaduaTransformPlan{Float64}(3);\n\njulia> out = invpaduatransform!(Vector{Float64}(undef, getpaduanum(3)), invplan, coeffs)\n10-element Vector{Float64}:\n  8.5\n  2.5\n -3.5\n  3.914213562373095\n  1.0857864376269049\n -0.5\n  2.5\n  5.5\n -0.3284271247461903\n  5.32842712474619\n\njulia> out ≈ vals\ntrue","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"where we used getpaduanum to get the number of Padua points and coefficients corresponding to total degree 3.","category":"page"},{"location":"padua_transforms/#The-Algorithm-–-Step-by-Step","page":"Padua Transforms","title":"The Algorithm – Step by Step","text":"","category":"section"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"To obtain the coefficients a_ij we need to evaluate the function f at some points (x_l y_k) and evaluate","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"a_ij = sum_k l  f(x_l y_k)  T_i(y_k)  T_j(x_l)","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"If we let x_l = cosfraclπn and y_k = cosfrackπm, we have","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"a_ij = sum_k l  f(cosfraclπn cosfrackπm)  T_i(cosfrackπm)  T_j(cosfraclπn)","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"which simplifies to","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"a_ij = sum_k l  f(cosfraclπn cosfrackπm)  cosfracikπm  cosfracjlπn","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"because of the definition of the Chebyshev polynomials as T_n(x) = cos(n arccos(x)). The expression above looks like a discrete cosine transform, which is what we will make use of to implement the Padua transform. Note that this derivation doesn't tell the full story. In fact, we are missing some weighting factors. For further reading on the Padua Transform, please see the following:","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"For details on the Padua points as good nodes for polynomial interpolation: Marco Caliari, Stefano De Marchi, Marco Vianello. Bivariate polynomial interpolation on the square at new nodal sets","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"and for details on the implementation of the transform via a discrete cosine transform: Marco Caliari, Stefano De Marchi, Alvise Sommariva, Marco Vianello. Padua2DM: fast interpolation and cubature at the Padua points in Matlab/Octave","category":"page"},{"location":"padua_transforms/#The-Padua-Points","page":"Padua Transforms","title":"The Padua Points","text":"","category":"section"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"There are multiple ways to define the set of Padua points. For our purposes we will use","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"textrmPad_n = (cosfracjπn cosfraciπn + 1)    0  j  n  0  i  n + 1  i - j  textrmeven ","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"where n is the total degree of the polynomial we can approximate using the Padua points. To generate the Padua points we can use the function getpaduapoints as follows","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"julia> getpaduapoints(3)\n10×2 Matrix{Float64}:\n  1.0   1.0\n  1.0   0.0\n  1.0  -1.0\n  0.5   0.707107\n  0.5  -0.707107\n -0.5   1.0\n -0.5   0.0\n -0.5  -1.0\n -1.0   0.707107\n -1.0  -0.707107","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"Using do block syntax we can evaluate a function on the Padua points.","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"julia> vals = getpaduapoints(3) do x, y\n           y * (2x^2 - 1) + 5 * x * y + 2.5\n       end\n10-element Vector{Float64}:\n  8.5\n  2.5\n -3.5\n  3.914213562373095\n  1.0857864376269049\n -0.5\n  2.5\n  5.5\n -0.3284271247461903\n  5.32842712474619","category":"page"},{"location":"padua_transforms/#The-Padua-Transform","page":"Padua Transforms","title":"The Padua Transform","text":"","category":"section"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"Having evaluated our function on the Padua points, we can perform the transform. First, we initialise a transform plan.","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"julia> plan = PaduaTransformPlan{Float64}(3);","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"The transform consists of writing vals into plan.vals, applying a fast fourier transform and weighting the resulting coefficients to obtain the Chebyshev coefficients. We start by writting values into the values matrix using tovalsmat!.","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"julia> ChebyshevTransforms.tovalsmat!(plan.vals, vals, 3)\n5×4 Matrix{Float64}:\n  8.5  0.0      -0.5   0.0\n  0.0  3.91421   0.0  -0.328427\n  2.5  0.0       2.5   0.0\n  0.0  1.08579   0.0   5.32843\n -3.5  0.0       5.5   0.0","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"vals are written into the matrix plan.vals such that the entry plan.vals[i+1, j+1] corresponds to the Padua point (cosfracjπn cosfraciπn + 1). However, since the Padua points are only those points with i-j even, all entries corresponding to i-j odd are left out. These off grid entries must be filled with 0. Next, we can apply the discrete cosine transform and weight! the coefficients to obtain the Chebyshev coefficients.","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"julia> plan.dctplan * plan.vals\n5×4 Matrix{Float64}:\n 60.0   0.0   0.0   0.0\n  0.0  30.0   6.0   0.0\n  0.0   0.0   0.0   0.0\n  0.0   6.0  30.0   0.0\n  0.0   0.0   0.0  60.0\n\njulia> ChebyshevTransforms.weight!(plan.vals, 3)\n5×4 Matrix{Float64}:\n 2.5  0.0  0.0  0.0\n 0.0  5.0  1.0  0.0\n 0.0  0.0  0.0  0.0\n 0.0  1.0  5.0  0.0\n 0.0  0.0  0.0  2.5","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"The weighting factor we apply to the coefficients is","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"w = frac1n(n+1)  begincases\n    frac12  textrmif on vertex   \n    1            textrmif on edge     \n    2            textrmif in interior \nendcases","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"Finally, we write those coefficients corresponding to a total degree of 3 or lower (the upper left triangular) into the output.","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"julia> coeffs = zeros(4, 4)\n4×4 Matrix{Float64}:\n 0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0\n\njulia> ChebyshevTransforms.fromcoeffsmat!(coeffs, plan.vals, 3)\n4×4 Matrix{Float64}:\n 2.5  0.0  0.0  0.0\n 0.0  5.0  1.0  0.0\n 0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0","category":"page"},{"location":"padua_transforms/#The-Inverse-Padua-Transform","page":"Padua Transforms","title":"The Inverse Padua Transform","text":"","category":"section"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"If we have a set of Chebyshev coefficients and want to obtain the values of the corresponding Chebyshev polynomial on the Padua points, we must use the inverse Padua transform. Again, we start with a plan and write our coefficients into plan.coeffs.","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"julia> invplan = InvPaduaTransformPlan{Float64}(3);\n\njulia> ChebyshevTransforms.tocoeffsmat!(invplan.coeffs, coeffs)\n5×4 Matrix{Float64}:\n 2.5  0.0  0.0  0.0\n 0.0  5.0  1.0  0.0\n 0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"Next, we weight the coefficients using invweight! and apply a discrete cosine transform.","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"julia> ChebyshevTransforms.invweight!(invplan.coeffs)\n5×4 Matrix{Float64}:\n 2.5  0.0   0.0   0.0\n 0.0  1.25  0.25  0.0\n 0.0  0.0   0.0   0.0\n 0.0  0.0   0.0   0.0\n 0.0  0.0   0.0   0.0\n\njulia> invplan.dctplan * invplan.coeffs\n5×4 Matrix{Float64}:\n  8.5      4.5      -0.5      -1.5\n  6.74264  3.91421   0.37868  -0.328427\n  2.5      2.5       2.5       2.5\n -1.74264  1.08579   4.62132   5.32843\n -3.5      0.5       5.5       6.5","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"invweight! applies the weighting","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"w = begincases\n    1            textrmif on vertex   \n    frac12  textrmif on edge     \n    frac14  textrmif in interior \nendcases","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"Finally, we copy over those values corresponding to i-j even and we have our values back.","category":"page"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"julia> out = ChebyshevTransforms.fromvalsmat!(Vector{Float64}(undef, getpaduanum(3)), invplan.coeffs, 3)\n10-element Vector{Float64}:\n  8.5\n  2.5\n -3.5\n  3.914213562373095\n  1.0857864376269049\n -0.5\n  2.5\n  5.5\n -0.3284271247461903\n  5.32842712474619\n\njulia> vals ≈ out\ntrue","category":"page"},{"location":"padua_transforms/#Reference","page":"Padua Transforms","title":"Reference","text":"","category":"section"},{"location":"padua_transforms/#Padua-Points","page":"Padua Transforms","title":"Padua Points","text":"","category":"section"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"getpaduapoints","category":"page"},{"location":"padua_transforms/#ChebyshevTransforms.getpaduapoints","page":"Padua Transforms","title":"ChebyshevTransforms.getpaduapoints","text":"getpaduapoints([f::Function,], [T=Float64,] n)\n\nevaluates the function f on the Padua points (of type T) for degree n.\n\nIf no function f is provided, getpaduapoints returns a matrix of the paduapoints, where the first and second column represent the x and y components respectively. If f returns a single value, getpaduapoints returns a Vector{T}. If f returns a tuple or other indexable iterable, getpaduapoints returns a Matrix{T} where the i-th column represents the i-th component function of f applied to all of the Padua points.\n\nExamples\n\njulia> getpaduapoints(2)\n6×2 Matrix{Float64}:\n  1.0   1.0\n  1.0  -0.5\n  0.0   0.5\n  0.0  -1.0\n -1.0   1.0\n -1.0  -0.5\n\njulia> getpaduapoints(Float32, 1)\n3×2 Matrix{Float32}:\n  1.0   1.0\n  1.0  -1.0\n -1.0   0.0\n\njulia> getpaduapoints(Float32, 2) do x, y; x*y; end\n6-element Vector{Float32}:\n  1.0\n -0.50000006\n  0.0\n -0.0\n -1.0\n  0.50000006\n\njulia> getpaduapoints(2) do x, y; x*y, 5*x*y; end\n6×2 Matrix{Float64}:\n  1.0   5.0\n -0.5  -2.5\n  0.0   0.0\n -0.0  -0.0\n -1.0  -5.0\n  0.5   2.5\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#Numbers-of-Coefficients-and-Points","page":"Padua Transforms","title":"Numbers of Coefficients and Points","text":"","category":"section"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"getpaduanum\ngetdegree\nnextpaduanum\nnextdegree","category":"page"},{"location":"padua_transforms/#ChebyshevTransforms.getpaduanum","page":"Padua Transforms","title":"ChebyshevTransforms.getpaduanum","text":"getpaduanum(n)\n\ncalculates number of Padua points needed to approximate a function using Chebyshev polynomials up to total degree n. This number is equal to the number of coefficients. The formula is\n\nN = (n + 1)  (n + 2)  2\n\nExamples\n\njulia> getpaduanum(13)\n105\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#ChebyshevTransforms.getdegree","page":"Padua Transforms","title":"ChebyshevTransforms.getdegree","text":"getdegree(N)\n\ncalculates total degree, given the number of coefficients or Padua points N. Throws an error if N is not a possible number of Padua points. The formula is\n\nn = fracsqrt1 + 8N - 32\n\nExamples\n\njulia> getdegree(105)\n13\n\njulia> getdegree(104)\nERROR: ArgumentError: number of Padua points or coeffs must be (n + 1) * (n + 2) ÷ 2\n[...]\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#ChebyshevTransforms.nextpaduanum","page":"Padua Transforms","title":"ChebyshevTransforms.nextpaduanum","text":"nextpaduanum(N)\n\nget next valid number of Padua points ≥ N.\n\nExamples\n\njulia> nextpaduanum(104)\n105\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#ChebyshevTransforms.nextdegree","page":"Padua Transforms","title":"ChebyshevTransforms.nextdegree","text":"nextdegree(N)\n\nget degree of nextpaduanum(N).\n\nExamples\n\njulia> nextdegree(104)\n13\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#Padua-Transform","page":"Padua Transforms","title":"Padua Transform","text":"","category":"section"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"PaduaTransformPlan\npaduatransform!","category":"page"},{"location":"padua_transforms/#ChebyshevTransforms.PaduaTransformPlan","page":"Padua Transforms","title":"ChebyshevTransforms.PaduaTransformPlan","text":"PaduaTransformPlan{T}(n::Integer)\n\ncreate plan to compute coefficients of Chebyshev polynomials in 2D up to total degree n using the Padua transform.\n\n\n\n\n\n","category":"type"},{"location":"padua_transforms/#ChebyshevTransforms.paduatransform!","page":"Padua Transforms","title":"ChebyshevTransforms.paduatransform!","text":"paduatransform!(coeffs, P::PaduaTransformPlan, vals[, lex])\n\nobtain coefficients of Chebyshev polynomials on 2D via the Padua transform, given values vals evaluated at the Padua points. Coefficients will be written into coeffs, which should either be a matrix, a vector or an iterable of either.\n\nIf an iterable of vals vectors and a corresponding iterable of coeffs matrixes or vectors is given, each vals vector will be transformed seperately in a multidimensional Padua transform.\n\nlex determines the order in which coefficients are written into out if out is a vector. See fromcoeffsmat! for details.\n\nwarning: Warning\nif coeffs is a matrix, make sure that all entries in the lower right diagonal are zero as these will not get overwritten.\n\nExamples\n\njulia> plan = PaduaTransformPlan{Float64}(2);\n\njulia> f(x, y) = 3 + 4x + 5 * x*y, 6 + 7y\nf (generic function with 1 method)\n\njulia> vals = getpaduapoints(f, 2)\n6×2 Matrix{Float64}:\n 12.0  13.0\n  4.5   2.5\n  3.0   9.5\n  3.0  -1.0\n -6.0  13.0\n  1.5   2.5\n\njulia> paduatransform!(zeros(3, 3), plan, vals[:, 1])\n3×3 Matrix{Float64}:\n 3.0  4.0  0.0\n 0.0  5.0  0.0\n 0.0  0.0  0.0\n\njulia> paduatransform!(zeros(6), plan, vals[:, 2], Val(true))\n6-element Vector{Float64}:\n 6.0\n 0.0\n 7.0\n 0.0\n 0.0\n 0.0\n\njulia> paduatransform!((zeros(3, 3), zeros(3, 3)), plan, vals)\n([3.0 4.0 0.0; 0.0 5.0 0.0; 0.0 0.0 0.0], [6.0 0.0 0.0; 7.0 0.0 0.0; 0.0 0.0 0.0])\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#Inverse-Padua-Transform","page":"Padua Transforms","title":"Inverse Padua Transform","text":"","category":"section"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"InvPaduaTransformPlan\ninvpaduatransform!","category":"page"},{"location":"padua_transforms/#ChebyshevTransforms.InvPaduaTransformPlan","page":"Padua Transforms","title":"ChebyshevTransforms.InvPaduaTransformPlan","text":"InvPaduaTransformPlan{T}(n::Integer)\n\ncreate plan to compute values on Padua points, given coefficients of Chebyshev polynomials up to total degree n.\n\n\n\n\n\n","category":"type"},{"location":"padua_transforms/#ChebyshevTransforms.invpaduatransform!","page":"Padua Transforms","title":"ChebyshevTransforms.invpaduatransform!","text":"invpaduatransform!(vals::AbstractVector, IP::InvPaduaTransformPlan, coeffs::AbstractMatrix)\n\nevaluates the polynomial defined by the coefficients of Chebyshev polynomials coeffs on the Padua points using the inverse transform plan IP and writes the resulting values into vals.\n\nIf an iterable of vals vectors or a vals matrix and a corresponding iterable of coeffs matrixes is given, each coeffs matrix will be transformed seperately.\n\nExamples\n\njulia> iplan = InvPaduaTransformPlan{Float64}(2);\n\njulia> coeffs = [[3 4 0; 0 5 0; 0 0 0], [3 0 1; 4 0 0; 0 0 0]]\n2-element Vector{Matrix{Int64}}:\n [3 4 0; 0 5 0; 0 0 0]\n [3 0 1; 4 0 0; 0 0 0]\n\njulia> invpaduatransform!(zeros(6), iplan, coeffs[1])\n6-element Vector{Float64}:\n 12.0\n  4.5\n  3.0\n  3.0\n -6.0\n  1.5\n\njulia> invpaduatransform!((zeros(6), zeros(6)), iplan, coeffs)\n([12.0, 4.5, 3.0, 3.0, -6.0, 1.5], [8.0, 2.0, 4.0, -2.0, 8.0, 2.0])\n\njulia> invpaduatransform!(zeros(6, 2), iplan, coeffs)\n6×2 Matrix{Float64}:\n 12.0   8.0\n  4.5   2.0\n  3.0   4.0\n  3.0  -2.0\n -6.0   8.0\n  1.5   2.0\n\njulia> getpaduapoints(2) do x, y; (3 + 4x + 5 * x*y, 3 + 2x^2 - 1 + 4y); end\n6×2 Matrix{Float64}:\n 12.0   8.0\n  4.5   2.0\n  3.0   4.0\n  3.0  -2.0\n -6.0   8.0\n  1.5   2.0\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#Internals","page":"Padua Transforms","title":"Internals","text":"","category":"section"},{"location":"padua_transforms/","page":"Padua Transforms","title":"Padua Transforms","text":"paduapoint\nispadua\ntovalsmat!\nweight!\nfromcoeffsmat!\ntocoeffsmat!\ninvweight!\nfromvalsmat!","category":"page"},{"location":"padua_transforms/#ChebyshevTransforms.paduapoint","page":"Padua Transforms","title":"ChebyshevTransforms.paduapoint","text":"paduapoint(T::Type, j::Integer, i::Integer, n::Integer)\n\nreturns the Padua point z_ij, where\n\nz_ij = (cosfracjπn cosfraciπn+1)\n\nNote, that only points with i-j even are actually Padua points. Check with ispadua.\n\nExamples\n\njulia> [ChebyshevTransforms.paduapoint(Float32, x, y, 1) for y in 0:1+1, x in 0:1]\n3×2 Matrix{Tuple{Float32, Float32}}:\n (1.0, 1.0)   (-1.0, 1.0)\n (1.0, 0.0)   (-1.0, 0.0)\n (1.0, -1.0)  (-1.0, -1.0)\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#ChebyshevTransforms.ispadua","page":"Padua Transforms","title":"ChebyshevTransforms.ispadua","text":"ispadua(i, j)\n\nreturns if paduapoint at position (i, j) is a Padua point.\n\nExamples\n\njulia> pointornothing(i, j, n) = ChebyshevTransforms.ispadua(i, j) ? ChebyshevTransforms.paduapoint(Float64, j, i, n) : nothing\npointornothing (generic function with 1 method)\n\njulia> [pointornothing(y, x, 2) for y in 0:3, x in 0:2]\n4×3 Matrix{Union{Nothing, Tuple{Float64, Float64}}}:\n (1.0, 1.0)   nothing      (-1.0, 1.0)\n nothing      (0.0, 0.5)   nothing\n (1.0, -0.5)  nothing      (-1.0, -0.5)\n nothing      (0.0, -1.0)  nothing\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#ChebyshevTransforms.tovalsmat!","page":"Padua Transforms","title":"ChebyshevTransforms.tovalsmat!","text":"tovalsmat!(mat::Matrix, from::AbstractVector, degree::Integer)\n\nwrite values of function evaluated at Padua points from from to matrix mat.\n\nExamples\n\njulia> ChebyshevTransforms.tovalsmat!(ones(3 + 2, 3 + 1), 1:getpaduanum(3), 3)\n5×4 Matrix{Float64}:\n 1.0  0.0  6.0   0.0\n 0.0  4.0  0.0   9.0\n 2.0  0.0  7.0   0.0\n 0.0  5.0  0.0  10.0\n 3.0  0.0  8.0   0.0\n\njulia> ChebyshevTransforms.tovalsmat!(ones(2 + 2, 2 + 1), 1:getpaduanum(2), 2)\n4×3 Matrix{Float64}:\n 1.0  0.0  5.0\n 0.0  3.0  0.0\n 2.0  0.0  6.0\n 0.0  4.0  0.0\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#ChebyshevTransforms.weight!","page":"Padua Transforms","title":"ChebyshevTransforms.weight!","text":"weight!(mat::AbstractMatrix, degree::Integer)\n\nweight fourier coefficients to obtain Chebyshev coefficients as part of a paduatransform!. The weighting factor applied to the coefficients is\n\nw = frac1n(n+1)  begincases\n    frac12  textrmif on vertex   \n    1            textrmif on edge    \n    2            textrmif in interior \nendcases\n\nExamples\n\njulia> weight!(ones(4+2, 4+1), 4)\n6×5 Matrix{Float64}:\n 0.025  0.05  0.05  0.05  0.025\n 0.05   0.1   0.1   0.1   0.05\n 0.05   0.1   0.1   0.1   0.05\n 0.05   0.1   0.1   0.1   0.05\n 0.05   0.1   0.1   0.1   0.05\n 0.025  0.05  0.05  0.05  0.025\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#ChebyshevTransforms.fromcoeffsmat!","page":"Padua Transforms","title":"ChebyshevTransforms.fromcoeffsmat!","text":"fromcoeffsmat!(to::AbstractVector, mat::Matrix, degree::Integer, ::Val{lex})\n\nwrite Chebyshev coefficients from mat into vector to. lex::Bool determines whether coefficients should be written in lexigraphical order or not. The lower right triangle does not get written into to. These would represent greater polynomial degrees than degree.\n\nIf lex is Val(true) the coefficients correspond to the following basis polynomials\n\nT_0(x) T_0(y) T_1(x) T_0(y) T_0(x) T_1(y) T_2(x) T_0(y) T_1(x) T_1(y) T_0(x) T_2(y) \n\nelse if lex is Val(false) they correspond to\n\nT_0(x) T_0(y) T_0(x) T_1(y) T_1(x) T_0(y) T_0(x) T_2(y) T_1(x) T_1(y) T_2(x) T_0(y) \n\nExamples\n\njulia> mat = [(x, y) for y in 0:2+1, x in 0:2]\n4×3 Matrix{Tuple{Int64, Int64}}:\n (0, 0)  (1, 0)  (2, 0)\n (0, 1)  (1, 1)  (2, 1)\n (0, 2)  (1, 2)  (2, 2)\n (0, 3)  (1, 3)  (2, 3)\n\njulia> to1 = similar(mat, getpaduanum(2)); to2 = similar(mat, getpaduanum(2));\n\njulia> ChebyshevTransforms.fromcoeffsmat!(to1, mat, 2, Val(true))\n6-element Vector{Tuple{Int64, Int64}}:\n (0, 0)\n (1, 0)\n (0, 1)\n (2, 0)\n (1, 1)\n (0, 2)\n\njulia> ChebyshevTransforms.fromcoeffsmat!(to2, mat, 2, Val(false))\n6-element Vector{Tuple{Int64, Int64}}:\n (0, 0)\n (0, 1)\n (1, 0)\n (0, 2)\n (1, 1)\n (2, 0)\n\n\n\n\n\nfromcoeffsmat!(to::AbstractMatrix, mat::Matrix, degree::Integer)\n\ncopy Chebyshev coefficients from mat to to without copying coefficients coresponding to total degree greater than degree.\n\nExamples\n\njulia> ChebyshevTransforms.fromcoeffsmat!(zeros(4, 4), reshape(1:20, 5, 4), 3)\n4×4 Matrix{Float64}:\n 1.0  6.0  11.0  16.0\n 2.0  7.0  12.0   0.0\n 3.0  8.0   0.0   0.0\n 4.0  0.0   0.0   0.0\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#ChebyshevTransforms.tocoeffsmat!","page":"Padua Transforms","title":"ChebyshevTransforms.tocoeffsmat!","text":"tocoeffsmat!(mat::AbstractMatrix, coeffs::AbstractMatrix)\n\nwrites coefficients in coeffs into matrix mat for the invpaduatransform!.\n\nExamples\n\njulia> ChebyshevTransforms.tocoeffsmat!(zeros(5, 4), reshape(1:16, 4, 4))\n5×4 Matrix{Float64}:\n 1.0  5.0   9.0  13.0\n 2.0  6.0  10.0  14.0\n 3.0  7.0  11.0  15.0\n 4.0  8.0  12.0  16.0\n 0.0  0.0   0.0   0.0\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#ChebyshevTransforms.invweight!","page":"Padua Transforms","title":"ChebyshevTransforms.invweight!","text":"invweight!(coeffs::AbstractMatrix)\n\nweight Chebyshev coefficients before the Fourier transform for the invpaduatransform!. using the weighting\n\nw = begincases\n    1             textrmif on vertex   \n    frac12  textrmif on edge     \n    frac14  textrmif in interior \nendcases\n\nExamples\n\njulia> ChebyshevTransforms.invweight!(ones(5, 5))\n5×5 Matrix{Float64}:\n 1.0  0.5   0.5   0.5   1.0\n 0.5  0.25  0.25  0.25  0.5\n 0.5  0.25  0.25  0.25  0.5\n 0.5  0.25  0.25  0.25  0.5\n 1.0  0.5   0.5   0.5   1.0\n\n\n\n\n\n","category":"function"},{"location":"padua_transforms/#ChebyshevTransforms.fromvalsmat!","page":"Padua Transforms","title":"ChebyshevTransforms.fromvalsmat!","text":"fromvalsmat!(to::AbstractVector, mat::AbstractMatrix, n::Integer)\n\nwrite values from mat into the vector to after an invpaduatransform! of total degree n.\n\nExamples\n\njulia> ChebyshevTransforms.fromvalsmat!(zeros(10), reshape(1:20, 5, 4), 3)\n10-element Vector{Float64}:\n  1.0\n  3.0\n  5.0\n  7.0\n  9.0\n 11.0\n 13.0\n 15.0\n 17.0\n 19.0\n\n\n\n\n\n","category":"function"},{"location":"#ChebyshevTransforms.jl","page":"Home","title":"ChebyshevTransforms.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ChebyshevTransforms","category":"page"},{"location":"#ChebyshevTransforms","page":"Home","title":"ChebyshevTransforms","text":"ChebyshevTransforms\n\na library for approximating functions by Chebyshev polynomials.\n\n\n\n\n\n","category":"module"},{"location":"","page":"Home","title":"Home","text":"Currently, only functions of two variables are supported via the so called Padua transform.","category":"page"}]
}
